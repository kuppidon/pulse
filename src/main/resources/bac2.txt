package ua.doctors.book.view.mainforms;

import com.google.common.eventbus.Subscribe;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Responsive;
import com.vaadin.shared.ui.datefield.Resolution;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.ValoTheme;
import org.vaadin.suggestfield.SuggestField;
import CourseBean;
import PatientBean;
import UserBean;
import VenueBean;
import DashboardEvent;
import DashboardEventBus;
import DoctorsBookUI;
import FormSelectPeriod;

import java.util.Date;
import java.util.List;

/**
 * Created by Alex on 02.01.2017.
 */
public class DoctorViewHistory extends VerticalLayout implements View {

    private PopupDateField endDate;
    private PopupDateField startDate;
    private final VenueBean department;
    private SuggestField patientField;
    private PatientBean patient;
    private CourseBean course;
    private HorizontalLayout panelPatient;
    private Table table;
    private Accordion assignments;
    private final UserBean currentUser;
    private HorizontalSplitPanel mainPanel;
    private Button btnAddAssignment;
    private boolean selectFromTable;
    private Panel panelAssignments;
    private Label diagnos;

    public DoctorViewHistory(){

        setSizeFull();
        addStyleName("postview");
        DashboardEventBus.register(this);
        startDate = new PopupDateField(null, DoctorsBookUI.getPulseHelper().beginningMonth(new java.util.Date()));
        endDate = new PopupDateField(null, new Date());

        department = DoctorsBookUI.getDataProvider().getVenueById(1l);
        currentUser = DoctorsBookUI.getAuntetificateUser();
        addComponent(buildHeaderBar());

        buildMainTableAndAssignment();
        addComponent(mainPanel);

        setExpandRatio(mainPanel,1);


    }

    private void buildMainTableAndAssignment(){

        VerticalSplitPanel vPanel = new VerticalSplitPanel();
        vPanel.setSplitPosition(100f,Unit.PIXELS,true);

        table = new Table();
        table.setMultiSelect(false);
        table.setSizeFull();
        table.setSortEnabled(true);
        table.setImmediate(true);
        table.setNullSelectionAllowed(false);
        table.addStyleName(ValoTheme.TABLE_SMALL);
       // table.addStyleName("small_table");
        table.setColumnReorderingAllowed(true);
        table.setColumnCollapsingAllowed(true);

        updateDateInPeriod();

        table.setColumnHeader("startDate", "Дата поступления");
        table.setColumnHeader("endDate", "Дата выписки");
        table.setColumnHeader("patient", "Пациент");
        table.setColumnHeader("diagnosisMKB10","Диагноз");
        table.setColumnAlignment("historyNumber", Table.Align.CENTER);
        table.setSortContainerPropertyId("startDate");
        table.setPageLength(table.size());

        table.addValueChangeListener(event -> {
            CourseBean selectCourse = (CourseBean) event.getProperty().getValue();
            patient = (selectCourse == null)?null:selectCourse.getPatient();
            course  = selectCourse;
            patientField.setConvertedValue(patient);
            panelAssignments.setCaption(patient==null?"Назначения":"Назначения для " + patient.getFullName());
            buildDiagnos();
            updateAssignments();

            // setVisibleControlsButtom();
        });

        mainPanel = new HorizontalSplitPanel();
        mainPanel.setSizeFull();
        mainPanel.addStyleName("splitpanelexample");
        mainPanel.setSplitPosition(75f,Unit.PERCENTAGE);
        mainPanel.setMaxSplitPosition(90f,Unit.PERCENTAGE);

        vPanel.setFirstComponent(table);
        diagnos = new Label();
        diagnos.setWidth("100%");
        diagnos.setCaptionAsHtml(true);
        HorizontalLayout panelDiagnos = new HorizontalLayout();
        Label titleDiagnos = new Label(" " + FontAwesome.INFO.getHtml() + " <b>Диагноз: </b>", ContentMode.HTML);
        titleDiagnos.addStyleName(ValoTheme.LABEL_COLORED);
        titleDiagnos.setCaptionAsHtml(true);
        panelDiagnos.addComponents(titleDiagnos,diagnos);
        panelDiagnos.setExpandRatio(diagnos,1);
        vPanel.setSecondComponent(panelDiagnos);
        mainPanel.setFirstComponent(vPanel);

        panelAssignments = new Panel("Назначения");
        panelAssignments.setIcon(FontAwesome.MEDKIT);
        panelAssignments.setSizeFull();
        panelAssignments.addStyleName("small_line_height");

        assignments = new Accordion();
        assignments.setSizeFull();
        panelAssignments.setContent(assignments);
        mainPanel.setSecondComponent(panelAssignments);
    }

    private void buildDiagnos(){
        if (course == null){
            diagnos.setCaption("");
            return;
        }
        diagnos.setCaption(course.getDescDiagnosHtml());
    }

    private void updateAssignments(){
       DoctorsBookUI.getPulseHelper().updateAssignmentAccordion(course,assignments);
    }

    private void updateDateInPeriod(){
        List<CourseBean> listCourse = DoctorsBookUI.getDataProvider().getCoursesByUserFromPeriod(
                new java.sql.Date(startDate.getValue().getTime()),
                new java.sql.Date(endDate.getValue().getTime()),
                currentUser);
        table.setContainerDataSource(new BeanItemContainer(CourseBean.class, listCourse));
        table.setVisibleColumns(new Object[] {"startDate", "endDate", "patient","diagnosisMKB10"});
    }

    @Override
    public void enter(ViewChangeListener.ViewChangeEvent event) {

    }

    private Component buildHeaderBar(){

        HorizontalLayout header = new HorizontalLayout();
        header.setSpacing(true);
        header.addStyleName(ValoTheme.WINDOW_BOTTOM_TOOLBAR);
       // header.setWidth("100%");
        header.setMargin(false);
        Responsive.makeResponsive(header);

        Label filterFrom = new Label("<b>Период: с </b>",ContentMode.HTML);
        //filterFrom.setWidth("5px");
        filterFrom.addStyleName(ValoTheme.LABEL_COLORED);
        filterFrom.addStyleName(ValoTheme.LABEL_SMALL);

        startDate = new PopupDateField(null, new Date());
        startDate.setWidth("90px");
        startDate.setIcon(null);
        startDate.addStyleName("no_icon");
        startDate.setInvalidAllowed(false);
        startDate.setResolution(Resolution.DAY);
        startDate.setDateFormat("dd.MM.yyyy");
        startDate.setReadOnly(true);
        startDate.addStyleName(ValoTheme.DATEFIELD_SMALL);

        Label filterTo = new Label("<b>по:</b> ",ContentMode.HTML);
        filterTo.addStyleName(ValoTheme.LABEL_COLORED);
        filterTo.addStyleName(ValoTheme.LABEL_SMALL);

        endDate.setInvalidAllowed(false);
        endDate.setResolution(Resolution.DAY);
        endDate.setDateFormat("dd.MM.yyyy");
        endDate.addStyleName(ValoTheme.DATEFIELD_SMALL);
        endDate.setWidth("90px");
        endDate.setIcon(null);
        endDate.addStyleName("no_icon");
        endDate.setReadOnly(true);

        Button btnPeriod = new Button("...");
        btnPeriod.addStyleName(ValoTheme.BUTTON_SMALL);
        btnPeriod.addClickListener(event -> {
            getUI().addWindow(new FormSelectPeriod(startDate.getValue(),endDate.getValue()));
        });

        header.addComponents(filterFrom,startDate,filterTo,endDate, btnPeriod);
//
//        Label patientTitle = new Label("<b>Пациент: </b>", ContentMode.HTML);
//        patientTitle.setSizeUndefined();
//        patientTitle.setHeight("31px");
//        patientTitle.addStyleName(ValoTheme.LABEL_COLORED);
//        patientTitle.addStyleName(ValoTheme.LABEL_SMALL);
//
//        patientField = new SuggestField();
//        PatientSuggestionConverter converter = new PatientSuggestionConverter();
//        //patientField.setIcon(FontAwesome.MALE);
//        patientField.addStyleName(ValoTheme.TEXTFIELD_SMALL);
//        patientField.setSuggestionConverter(converter);
//        patientField.setMinimumQueryCharacters(4);
//        patientField.setEnabled(true);
//        patientField.setWidth("300px");
//        patientField.setPopupWidth(500);
//        patientField.setInputPrompt("Выберите пациента");
//        patientField.setNewItemsAllowed(false);
//        patientField.addValueChangeListener(new Property.ValueChangeListener() {
//            @Override
//            public void valueChange(Property.ValueChangeEvent event) {
//                patient = (PatientBean) event.getProperty().getValue();
//                if (!selectFromTable) {
//                    course = DoctorsBookUI.getCourseService().getLastOpenCourseByPatient(patient);
//                    updateAssignments();
//                    buildDiagnos();
//                   // table.unselect(table.getValue());
//                }
//                panelAssignments.setCaption(patient==null?"Назначения":"Назначения для " + patient.getFullName());
//                selectFromTable = false;
//            }
//        });
//        patientField.setSuggestionHandler(new SuggestField.SuggestionHandler() {
//            @Override
//            public List<Object> searchItems(String query) {
//                return converter.handleSearchQuery(query);
//            }
//        });
//
//        header.addComponents(patientTitle, patientField);
//        header.setExpandRatio(patientField,1);
//
//        btnAddAssignment = new Button("Создать назначения");
//        btnAddAssignment.addStyleName(ValoTheme.BUTTON_FRIENDLY);
//        btnAddAssignment.addStyleName(ValoTheme.BUTTON_SMALL);
//        btnAddAssignment.setIcon(FontAwesome.PLUS_CIRCLE);
//        btnAddAssignment.addClickListener(event -> {
//            getUI().addWindow(new FormCreateEditAssignment(course));
//        });
//        header.addComponent(btnAddAssignment);
//        header.setComponentAlignment(btnAddAssignment, Alignment.TOP_RIGHT);

        return header;
    }

    @Subscribe
    public void updateAssignments(final DashboardEvent.CreateUpdateAssignment event){
        updateAssignments();
    }

    @Subscribe
    public void selectPeriod(final DashboardEvent.SelectPeriod event) {
        startDate.setReadOnly(false);
        endDate.setReadOnly(false);
        startDate.setValue(event.getStartDate());
        endDate.setValue(event.getEndDate());
        startDate.setReadOnly(true);
        endDate.setReadOnly(true);
        updateDateInPeriod();
    }
}
